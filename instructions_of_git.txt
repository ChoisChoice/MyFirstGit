1. 버전 관리 시스템(Version Control System)
- 시간에 따른 파일 변경을 버전으로 기록 및 추적하는 분산형 버전 시스템.
- 여러 개발자들의 하나의 파일을 공유하며 동시 작업 가능.
- 그 중 대표적인 것이 Git

2. Git 초기 설정
- git config --global user.name '이름'
- git config --global user.email '이메일'
- git config --list : 설정한 값이 잘 지정되어 있는지 확인.
- git init : .git이란 숨긴 폴더가 생성.

    ※ rm rf '파일명' : '파일명'에 해당하는 파일 지우기.

3. Git 기본 설정
- git config --global init.defaultbranch main : branch를 main으로 변경(브랜치명 수정)
- git branch -M main : branch를 main으로 변경.

    ※ 명령어에 대한 설명
        * 홈페이지에서 보기 => git help <동사>
        * 홈페이지에서 보기 => git <동사> --help
        * 프롬프트 안에서 보기 => git config -h

4. 파일이 존재할 수 있는 3가지 상태
- 수정된(modified) : 파일을 변경했지만 DB에 커밋하지 않은 상태.
- 스테이징된(staged) : 현재 버전의 수정된 파일을 다음 커밋 스냅샷에 포함하도록 표시한 상태.
- 커밋된(committed) : 데이터가 로컬 DB에 안전하게 저장된 상태.

    ※ Working Directory(Working Tree) --add--> Staging Area --commit--> .git Directory(Repository)
        * Working Tree : 프로젝트의 한 버전을 단일 체크아웃.
        * Staging Area : 다음 커밋에 포함될 내용을 저장.
        * Git Directory : Git이 프로젝트의 메타데이터와 객체 DB를 저장하는 곳, 다른 컴퓨터에서 저장소를 복제할 때 복사는 곳.

5. Git의 주요 작업 흐름
- 첫번째, Working Tree에서 파일 수정.
    - git status
        - 해당 Working Tree의 상태를 확인할 수 있음.
        - 수정되었거나 새로운 파일이 발견되면 해당 목록을 붉은 글씨로 보여줌.
    - git add <파일>ㅇ
        - 해당 <파일>을 버전에 적용함. -> Staging Area에 올림.
        - 부분이 아닌 전체 파일을 해당 버전으로 만들고 싶을 때 다음과 같이 사용함. => git add .
    - git rm --cached <파일>
        - Staging Area에서 <파일>을 Unstaging 함.

- 두번째, 커밋에 포함될 변경사항만 선택적으로 add하여 Staging Area에 올림.
    - git commit -m <"메세지"> or git commit --message <"메세지">
        - .git(Git Repository)에 변경사항(파일에 대한 메타데이터)과 객체 데이터베이스가 압축을 통해서 저장됨.
        - 즉, 버전으로서 파일의 변경사항을 기록하게 된다.

- 세번째, commit을 하여 Staging Area에 있는 파일을 Git Directory에 스냅샷으로 저장.
    - git log --gragh
        - 이전 커밋들을 확인 할 수 있음.
        - 커밋된 파일에 대한 해쉬값 그리고 작성자와 이메일 및 날짜는 물론 커밋 메시지를 확인할 수 있음.

6. Commit에 대한 추가 학습
- .git(Git Repository)에 파일의 스냅샷(SnapShot)을 기록하는 것.
- Git은 커밋할 때마다 디렉토리 전체를 복사하지 않음. -> 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역(delta)을 저장하는 방식.
- 그래서 대부분의 커밋이 그 커밋 위의 부모 커밋을 가리킴.

7. Snapshot에 대한 추가 학습
- 특정 순간을 캡쳐하여 기록하는 것을 의미함.
- 과거의 한 시점으로부터 변경된 내용에 대해 기록을 남기는 것을 의미함.

8. Commit을 해야하는 시점
- 기능 추가 : 해당 기능과 관련된 파일들을 하나의 commit으로 분리할 수 있음.
- 버그 수정 : 해당 버그에 대해 관련된 코드를 수정한 부분을 하나의 commit으로 분리할 수 있음.
- 리펙토링 : 리펙토링한 코드들을 하나의 commit으로 분리할 수 있음.
- 인터페이스 변경 : 인터페이스 변경에 관련된 코드와 파일을 하나의 commit으로 분리할 수 있음.
- 기타 변경 사항 : 코드 스타일 수정, 주석 추가, 문서 업데이트 등.

9. git commit의 옵션 => 자세한 내용은 git commit -h 에서 확인 가능.
- -m <"메시지"> or --message <"메시지"> : 커밋 메시지를 직접 명령어에 포함시킴.
- -a or --all : 모든 파일을 자동으로 Staging하고 Commit함. -> git add 명령어 생략 가능.
- --amend : 최신 commit을 수정. 이전 커밋에 새로운 변경사항을 추가하거나 커밋 메시지를 변경할 수 있음.

10. VS Code에서 commit 메시지 수정하는 방법
- git config --global core.editor "code -w"

11. Github는 온라인에 저장하기 위한 서비스

12. Git에 Github 연동하기
- 첫번째, Uniform Resource Identifier(URI)을 생성한다.
    - https://<Token Key>@<Repository HTTPS Address>
- 두번째, URI 주소를 등록한다.
    - git remote add origin <URI>
- 세번째, 원격 저장소 명칭 및 주소를 확인한다.
    - git remote -v
- 네번째, GitHub에 업데이트한다.
    - git push -u origin <브랜치명 : main> : 위에서 URI 주소가 여기서 origin을 뜻함.
    - push : Local의 파일을 온라인(GitHub)에 업데이트함.

    ※ 원격저장소 주소(URI) 수정하는 방법
        * git remote set_url origin <새로운 URI 주소>

13. Git에서 특정 버전의 특정 파일 내용을 확인
- git show <버전>:<파일경로>
    - 버전 : 커밋 해시(git log 를 통해 확인 가능), 브랜치 이름, 태그 등
    - 파일경로 : 상대 또는 절대 경로

14. Git에서 변경된 내용을 비교
- git diff : 현재 Working Tree와 Staging Area 사이의 변경 내용을 확인.
- git diff --staged : Staging Area와 최신 Commit 사이의 변경 내용을 확인.
- git diff <commit-hash> : 현재 Working Tree와 최신 Commit 사이의 변경 내용을 확인.
- 위의 코드를 사용하면 변경된 내용을 비교, 코드 리뷰, 오류 확인등의 작업을 할 수 있다.

    ※ git restore --staged <파일> : Staging Area에 있는 파일 Unstaging.

15. git clone : Git 저장소를 복제하는 명령. 즉, 원격 저장소에서 프로젝트의 모든 파일과 버전 관리 정보를 가져와 로컬 시스템에 동일한 저장소를 생성함.
- git clone <원격 저장소 경로>
   - 원격 저장소 경로 : 복제하려는 Git 저장소의 위치(예시 : Github의 URL)
- 예를 들면, 외부에서 작성한 파일을 Github에 push하고 집에서 Github에 저장된 파일을 가져올 때 clone을 사용함.
- 그래서 git clone을 사용하여 프로젝트를 복제하면 로컬 시스템에서 독립적으로 작업할 수 있으며, 버전관리 및 협업을 수행할 수 있음.
- 복제된 저장소는 원격 저장소와 동기화를 유지하며, 필요에 따라 새로운 브랜치를 생성하거나 변경 내용을 커밋하여 프로젝트를 업데이트할 수 있음.

16. Git 사용 간의 충돌
- 상황 : 서로 다른 로컬에서 하나의(같은) 파일을 업데이트하고 Github Repository에 push하여 병합(merge)을 시도.
   - 문제점 : 만약 한쪽에서 하나의(같은) 파일을 Github Repository에 push를 해서 최신버전의 파일이 생긴다면, 다른 쪽에서 하나의(같은) 파일을 push할 때 버전 차이로 인한 에러가 발생하여 충돌함.
   - 이러한 충돌은 Git이 자동으로 해결할 수 없으며 수동으로 충돌을 해결해야 함.
   - 충돌이 있는 경우, git status를 사용했을 때 'Unmerged' 상태로 표시됨.

- 충돌 시나리오 예제 코드
   - git fetch origin
   - git log origin/main : main branch의 기록 확인.
   - git diff origin/main : main branch의 Working Tree와 Staging Area 사이의 변경 내용을 확인.
   - git merge origin/main : 충돌!

- 이러한 충돌을 해결하려면 다음과 같이 접근함.
   - vi <해당파일.확장자명> : vi editor로 들어감.
      - 여기서 '<<<<<<< HEAD'와 '======' 그리고 '>>>>>>> origin/main'을 수동으로 제거한다.
   - git add <해당파일.확장자명> : 충돌 해결한 파일을 Staging함.
   - git commit -m <"커밋메시지">: 충돌이 발생한 branch를 병합하고, 커밋을 생성하여 충돌을 해결한 상태로 완료.
   - git push origin : Github Repository에 성공적으로 push됨.

- 정리
    - git fetch : Git Repository에서 commit을 가져옴.
    - git merge :  현재 Working Directory에 병합.
    - git pull = git fatch + git merge




